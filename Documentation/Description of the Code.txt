

DESCRIPTION OF THE CODE




For future Ingram Project Teams:

HOW TO SEND SENSOR DATA TO OFFICE PI:

** Use sendBatteryCharge.py as an example **

1. Create a log file variable. This variable will store the name of the log file and the location on the OfficePi where you 
want the data to be stored.

2. Establish a connection with the OfficePi.

3. Get the sensor data you want to send.

4. Send the sensor data.

5. End the connection with the OfficePi.





As of May 2018:

In the folder called RetPondPi:

sendBatteryCharge.py

This script runs on the RetPondPi twice a day at 10am and 2pm. The code to establish a socket connection and send the data is 
found in wirelessConnection.py which is imported into this script. The batteryLogFile at the top of the script is the location 
and name of the log file that will be stored on the OfficePi. The code sleeps for one second three different times to give the 
code plenty of time to finish each function before moving on. 


wirelessConnection.py

This code file is called a class and it implements all the functions necessary to establish a socket connection with the 
OfficePi, send and receive data, end the connection, and shutdown the server on the OfficePi. This code does not run or do 
anything on its own. It must be imported into another script like sendBatteryCharge.py where the code can be used. There is 
comments above each function that describes what the functions do. 


battery.py

This code file is the battery class. Like wirelessConnection.py, it implements code but does not run code by itself. This 
class must be imported into another python file to be used. This class is used in sendBatteryCharge.py. It returns the battery 
charge level as LOW, MEDIUM, or HIGH. If LOW is sent to the OfficePi, the OfficePi will play a .wav file the says the words, 
“Low Battery” so the employees in the office will know that the RetPondPi has a low battery.


In the folder called OfficePi

pythonServer.py

The first six functions are used in the code. The code begins at the very bottom with the line 
“time.sleep(60)”


This script establishes a socket at a given port number on the OfficePi. The OfficePi will wait and listen at the port number 
for the RetPondPi to initiate a connection. Once a connection is established, the OfficePi will receive data from the 
RetPondPi and save the data to the SD card.

The RetPondPi can control the OfficePi by sending commands to the OfficePi. 

Example of how to control the OfficePi from the RetPondPi:

The following example string will be sent to the OfficePi:
“SEND /home/pi/Desktop/logFile.log your_Sensor_Data”

How pythonServer.py processes this example string:
In the function dataTransfer(), there is a line of code that reads “dataMessage = data.split(‘ ‘,1)”.
This line of code splits the string sent to the OfficePi into 2 parts. Everything up until the first space will be stored in 
dataMessage[0] and everything after the first space will be stored in dataMessage[1].
For our example: dataMessage[0] will contain the word “SEND” and dataMessage[1] will contain the rest of the string 
“/home/pi/Desktop/logFile.log your_Sensor_Data”.

The code then checks the word stored in dataMessage[0]. If it equals “SEND” which it does for our example, then the string 
stored in dataMessage[1] is split again separating “/home/pi/Desktop/logFile.log” and “your_Sensor_Data” in two. The function 
SEND() is then called and the logFile and sensor_data is passed into the function.

The SEND() function saves the data to the logFile name that was passed to it. Then it calls the PROCESS() function. 

For the our project, we used the PROCESS() function to check the “data_message” that was sent. If “LOW” was sent, then the 
OfficePi will play a file that uses a speaker to say “Low Battery” for the office employees to hear. 

For a future sensor team, you will use the PROCESS() file to check your “sensor_data_message” to see if outflow has occurred. 
(When outflow occurs, you will probably send a message to the OfficePi that says something like “OUTFLOW”). You will add an if 
statement to the PROCESS() function that checks to see if the sent message = “OUTFLOW”. If it does, do what is needed. 







